#include "stdafx.h"
#include <iostream>
#include <conio.h>
#include <stdlib.h>
using namespace std;

int main()
{
	setlocale(LC_ALL, "Russian");
	int *M;
	int x; // Заранее неизвестное число элементов массива
	int y, a; // Индексная переменная
	printf_s("x="); scanf_s("%d", &x); // Ввод с клавиатуры числа элементов массива
	M = (int *)malloc(x * sizeof(int)); // Выделяем память под массив динамически в Си 
	for (y = 0; y < x; y++) // Заполняем массив случайными числами и печатаем его
	{
		M[y] = rand() % 100; // Получаем псевдослучайное целое число в интервале
							 // 0..99
		printf_s("%d ", M[y]);
	}
	cout << "\nПосле сортировки:" << endl;
	for (y = 0; y < x; y++) //Сортируем массив
	{
		for (int b = 0; b < x - 1; b++)
		{
			if (M[b] > M[b + 1]) //Если один элемент больше следующего за ним элемента, то они меняются местами
			{
				a = M[b];
				M[b] = M[b + 1];
				M[b + 1] = a;
			}
		}
	}
	for (y = 0; y < x; y++)
	{
		printf_s("%d ", M[y]); //Печатаем отсортированный массив
	}
	free(M);


	int **p; // Инициализируем 2-х мерный массив динамически
	int n, m; // Заранее неизвестные размерности массива
	int i, j; // Индексные переменные
	printf_s("\nn="); scanf_s("%d", &n); // Ввод с клавиатуры числа строк матрицы
	printf_s("m="); scanf_s("%d", &m); // Ввод с клавиатуры числа столбцов матрицы
	p = (int **)malloc(n * sizeof(int *)); // Выделяем память под массив указателей
	for (i = 0; i < n; i++) p[i] = (int *)malloc(m * sizeof(int)); // Выделяем память для каждого указателя в массиве указателей
	for (i = 0; i < n; i++) // Заполняем матрицу случайными числами и печатаем ее
	{
		for (j = 0; j < m; j++)
		{
			p[i][j] = rand() % 100; // Получаем псевдослучайное целое число
			printf_s("%d ", p[i][j]);
		}
		printf_s("\n"); // После печать строки матрицы переход на новую строчку
	}
	cout << "После переворачивания:" << endl;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < m; j++)
		{
			if (j < m / 2)
			{
				a = p[i][j]; //Меняем местами числа с одинаковым индексом при отсчете с начала и с конца
				p[i][j] = p[i][m - j - 1];
				p[i][m - j - 1] = a;
			}
			printf_s("%d ", p[i][j]);
		}
		printf_s("\n"); // После печать строки матрицы переход на новую строчку
	}
	for (i = 0; i < n; i++) free(p[i]); // Освобождаем память для строк матрицы
	free(p);// освобождаем память для массива указателей
	_getch();
	return 0;
}
